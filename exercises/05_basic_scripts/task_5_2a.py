# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
network = input("Введите адрес сети: ")

ip, mask = network.split("/")
ip_list = list(map(int, ip.split(".")))
mask = int(mask)

bin_ip = f"{ip_list[0]:08b}{ip_list[1]:08b}{ip_list[2]:08b}{ip_list[3]:08b}"

network_bin = bin_ip[:mask] + "0" * (32 - mask)

net_oct1 = int(network_bin[0:8], 2)
net_oct2 = int(network_bin[8:16], 2)
net_oct3 = int(network_bin[16:24], 2)
net_oct4 = int(network_bin[24:32], 2)

bin_mask = "1" * mask + "0" * (32 - mask)
m1, m2, m3, m4 = [
    int(bin_mask[0:8], 2),
    int(bin_mask[8:16], 2),
    int(bin_mask[16:24], 2),
    int(bin_mask[24:32], 2),
]

ip_output = f"""
Network:
{net_oct1:<10}{net_oct2:<10}{net_oct3:<10}{net_oct4:<10}
{net_oct1:08b}  {net_oct2:08b}  {net_oct3:08b}  {net_oct4:08b}
"""

mask_output = f"""
Mask:
/{mask}
{m1:<10}{m2:<10}{m3:<10}{m4:<10}
{m1:08b}  {m2:08b}  {m3:08b}  {m4:08b}
"""

print(ip_output)
print(mask_output)
